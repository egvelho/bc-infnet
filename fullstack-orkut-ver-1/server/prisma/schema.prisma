generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model comments {
  id         Int       @id @default(autoincrement())
  message    String?   @db.VarChar(255)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  post_id    Int?
  user_id    Int?
  posts      posts?    @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "comments_notepad_id_fkey")
  users      users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model friends {
  id                            Int     @id @default(autoincrement())
  user_req                      Int
  user_add                      Int
  status                        String? @db.VarChar(16)
  users_friends_user_addTousers users   @relation("friends_user_addTousers", fields: [user_add], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_friends_user_reqTousers users   @relation("friends_user_reqTousers", fields: [user_req], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model posts {
  id         Int        @id(map: "notepads_pkey") @default(autoincrement())
  message    String
  created_at DateTime?  @default(now()) @db.Timestamp(6)
  user_id    Int?
  comments   comments[]
  users      users?     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  id                              Int        @id @default(autoincrement())
  first_name                      String?    @db.VarChar(255)
  last_name                       String?    @db.VarChar(255)
  email                           String?    @db.VarChar(255)
  passwd                          String?    @db.VarChar(255)
  created_at                      DateTime?  @default(now()) @db.Timestamp(6)
  cool                            Int?       @default(0)
  reliable                        Int?       @default(0)
  sexy                            Int?       @default(0)
  comments                        comments[]
  friends_friends_user_addTousers friends[]  @relation("friends_user_addTousers")
  friends_friends_user_reqTousers friends[]  @relation("friends_user_reqTousers")
  posts                           posts[]
}
